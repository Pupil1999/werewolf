program werewolf.aleo;

struct ElgamalCipher:
    c1 as group;
    c2 as group;

struct RoleList:
    l1 as ElgamalCipher;
    l2 as ElgamalCipher;
    l3 as ElgamalCipher;
    l4 as ElgamalCipher;
    l5 as ElgamalCipher;
    l6 as ElgamalCipher;
    l7 as ElgamalCipher;
    l8 as ElgamalCipher;
    l9 as ElgamalCipher;
    l10 as ElgamalCipher;
    l11 as ElgamalCipher;
    l12 as ElgamalCipher;

struct PublicRoleKeys:
    wolf1 as group;
    wolf2 as group;
    wolf3 as group;
    wolf4 as group;
    villager1 as group;
    villager2 as group;
    villager3 as group;
    villager4 as group;
    seer as group;
    witch as group;
    hunter as group;
    protector as group;

struct SurvivorCipher:
    wolf as ElgamalCipher;
    villager as ElgamalCipher;
    psychic as ElgamalCipher;

struct CheckRoleList:
    p1 as ElgamalCipher;
    p2 as ElgamalCipher;
    p3 as ElgamalCipher;
    p4 as ElgamalCipher;
    p5 as ElgamalCipher;
    p6 as ElgamalCipher;
    p7 as ElgamalCipher;
    p8 as ElgamalCipher;
    p9 as ElgamalCipher;
    p10 as ElgamalCipher;
    p11 as ElgamalCipher;
    p12 as ElgamalCipher;

struct TwelveRand:
    r1 as scalar;
    r2 as scalar;
    r3 as scalar;
    r4 as scalar;
    r5 as scalar;
    r6 as scalar;
    r7 as scalar;
    r8 as scalar;
    r9 as scalar;
    r10 as scalar;
    r11 as scalar;
    r12 as scalar;

struct KillCipher:
    kc1 as ElgamalCipher;
    kc2 as ElgamalCipher;
    kc3 as ElgamalCipher;


function elgamal_key_gen:
    input r0 as scalar.private;
    mul r0 group::GEN into r1;
    output r1 as group.private;


function aggregate_public_keys:
    input r0 as group.public;
    input r1 as group.public;
    input r2 as group.public;
    input r3 as group.public;
    input r4 as group.public;
    input r5 as group.public;
    input r6 as group.public;
    input r7 as group.public;
    input r8 as group.public;
    input r9 as group.public;
    input r10 as group.public;
    input r11 as group.public;
    add r0 r1 into r12;
    add r12 r2 into r13;
    add r13 r3 into r14;
    add r14 r4 into r15;
    add r15 r5 into r16;
    add r16 r6 into r17;
    add r17 r7 into r18;
    add r18 r8 into r19;
    add r19 r9 into r20;
    add r20 r10 into r21;
    add r21 r11 into r22;
    output r22 as group.private;


function dec_public_key:
    input r0 as group.public;
    input r1 as group.public;
    sub r0 r1 into r2;
    output r2 as group.private;


function elgamal_enc:
    input r0 as group.private;
    input r1 as group.private;
    input r2 as scalar.private;
    mul r2 group::GEN into r3;
    mul r2 r1 into r4;
    add r4 r0 into r5;
    cast r3 r5 into r6 as ElgamalCipher;
    output r6 as ElgamalCipher.private;


function gen_role_list:
    input r0 as ElgamalCipher.public;
    input r1 as ElgamalCipher.public;
    input r2 as ElgamalCipher.public;
    input r3 as ElgamalCipher.public;
    input r4 as ElgamalCipher.public;
    input r5 as ElgamalCipher.public;
    input r6 as ElgamalCipher.public;
    input r7 as ElgamalCipher.public;
    input r8 as ElgamalCipher.public;
    input r9 as ElgamalCipher.public;
    input r10 as ElgamalCipher.public;
    input r11 as ElgamalCipher.public;
    cast r0.c1 r0.c2 into r12 as ElgamalCipher;
    cast r1.c1 r1.c2 into r13 as ElgamalCipher;
    cast r2.c1 r2.c2 into r14 as ElgamalCipher;
    cast r3.c1 r3.c2 into r15 as ElgamalCipher;
    cast r4.c1 r4.c2 into r16 as ElgamalCipher;
    cast r5.c1 r5.c2 into r17 as ElgamalCipher;
    cast r6.c1 r6.c2 into r18 as ElgamalCipher;
    cast r7.c1 r7.c2 into r19 as ElgamalCipher;
    cast r8.c1 r8.c2 into r20 as ElgamalCipher;
    cast r9.c1 r9.c2 into r21 as ElgamalCipher;
    cast r10.c1 r10.c2 into r22 as ElgamalCipher;
    cast r11.c1 r11.c2 into r23 as ElgamalCipher;
    cast r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 into r24 as RoleList;
    output r24 as RoleList.private;


function shuffle:
    input r0 as RoleList.public;
    input r1 as group.public;
    input r2 as scalar.private;
    input r3 as scalar.private;
    input r4 as scalar.private;
    input r5 as scalar.private;
    input r6 as scalar.private;
    input r7 as scalar.private;
    input r8 as scalar.private;
    input r9 as scalar.private;
    input r10 as scalar.private;
    input r11 as scalar.private;
    input r12 as scalar.private;
    input r13 as scalar.private;
    mul r2 group::GEN into r14;
    add r0.l1.c1 r14 into r15;
    mul r2 r1 into r16;
    add r0.l1.c2 r16 into r17;
    cast r15 r17 into r18 as ElgamalCipher;
    mul r3 group::GEN into r19;
    add r0.l2.c1 r19 into r20;
    mul r3 r1 into r21;
    add r0.l2.c2 r21 into r22;
    cast r20 r22 into r23 as ElgamalCipher;
    mul r4 group::GEN into r24;
    add r0.l3.c1 r24 into r25;
    mul r4 r1 into r26;
    add r0.l3.c2 r26 into r27;
    cast r25 r27 into r28 as ElgamalCipher;
    mul r5 group::GEN into r29;
    add r0.l4.c1 r29 into r30;
    mul r5 r1 into r31;
    add r0.l4.c2 r31 into r32;
    cast r30 r32 into r33 as ElgamalCipher;
    mul r6 group::GEN into r34;
    add r0.l5.c1 r34 into r35;
    mul r6 r1 into r36;
    add r0.l5.c2 r36 into r37;
    cast r35 r37 into r38 as ElgamalCipher;
    mul r7 group::GEN into r39;
    add r0.l6.c1 r39 into r40;
    mul r7 r1 into r41;
    add r0.l6.c2 r41 into r42;
    cast r40 r42 into r43 as ElgamalCipher;
    mul r8 group::GEN into r44;
    add r0.l7.c1 r44 into r45;
    mul r8 r1 into r46;
    add r0.l7.c2 r46 into r47;
    cast r45 r47 into r48 as ElgamalCipher;
    mul r9 group::GEN into r49;
    add r0.l8.c1 r49 into r50;
    mul r9 r1 into r51;
    add r0.l8.c2 r51 into r52;
    cast r50 r52 into r53 as ElgamalCipher;
    mul r10 group::GEN into r54;
    add r0.l9.c1 r54 into r55;
    mul r10 r1 into r56;
    add r0.l9.c2 r56 into r57;
    cast r55 r57 into r58 as ElgamalCipher;
    mul r11 group::GEN into r59;
    add r0.l10.c1 r59 into r60;
    mul r11 r1 into r61;
    add r0.l10.c2 r61 into r62;
    cast r60 r62 into r63 as ElgamalCipher;
    mul r12 group::GEN into r64;
    add r0.l11.c1 r64 into r65;
    mul r12 r1 into r66;
    add r0.l11.c2 r66 into r67;
    cast r65 r67 into r68 as ElgamalCipher;
    mul r13 group::GEN into r69;
    add r0.l12.c1 r69 into r70;
    mul r13 r1 into r71;
    add r0.l12.c2 r71 into r72;
    cast r70 r72 into r73 as ElgamalCipher;
    cast r18 r23 r28 r33 r38 r43 r48 r53 r58 r63 r68 r73 into r74 as RoleList;
    output r74 as RoleList.private;


function dec_shuffled_list:
    input r0 as RoleList.public;
    input r1 as scalar.private;
    mul r0.l1.c1 r1 into r2;
    sub r0.l1.c2 r2 into r3;
    cast r0.l1.c1 r3 into r4 as ElgamalCipher;
    mul r0.l2.c1 r1 into r5;
    sub r0.l2.c2 r5 into r6;
    cast r0.l2.c1 r6 into r7 as ElgamalCipher;
    mul r0.l3.c1 r1 into r8;
    sub r0.l3.c2 r8 into r9;
    cast r0.l3.c1 r9 into r10 as ElgamalCipher;
    mul r0.l4.c1 r1 into r11;
    sub r0.l4.c2 r11 into r12;
    cast r0.l4.c1 r12 into r13 as ElgamalCipher;
    mul r0.l5.c1 r1 into r14;
    sub r0.l5.c2 r14 into r15;
    cast r0.l5.c1 r15 into r16 as ElgamalCipher;
    mul r0.l6.c1 r1 into r17;
    sub r0.l6.c2 r17 into r18;
    cast r0.l6.c1 r18 into r19 as ElgamalCipher;
    mul r0.l7.c1 r1 into r20;
    sub r0.l7.c2 r20 into r21;
    cast r0.l7.c1 r21 into r22 as ElgamalCipher;
    mul r0.l8.c1 r1 into r23;
    sub r0.l8.c2 r23 into r24;
    cast r0.l8.c1 r24 into r25 as ElgamalCipher;
    mul r0.l9.c1 r1 into r26;
    sub r0.l9.c2 r26 into r27;
    cast r0.l9.c1 r27 into r28 as ElgamalCipher;
    mul r0.l10.c1 r1 into r29;
    sub r0.l10.c2 r29 into r30;
    cast r0.l10.c1 r30 into r31 as ElgamalCipher;
    mul r0.l11.c1 r1 into r32;
    sub r0.l11.c2 r32 into r33;
    cast r0.l11.c1 r33 into r34 as ElgamalCipher;
    mul r0.l12.c1 r1 into r35;
    sub r0.l12.c2 r35 into r36;
    cast r0.l12.c1 r36 into r37 as ElgamalCipher;
    cast r4 r7 r10 r13 r16 r19 r22 r25 r28 r31 r34 r37 into r38 as RoleList;
    output r38 as RoleList.private;


function gen_public_role_keys_list:
    input r0 as group.private;
    input r1 as group.private;
    input r2 as group.private;
    input r3 as group.private;
    input r4 as group.private;
    input r5 as group.private;
    input r6 as group.private;
    input r7 as group.private;
    input r8 as group.private;
    input r9 as group.private;
    input r10 as group.private;
    input r11 as group.private;
    cast r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 into r12 as PublicRoleKeys;
    output r12 as PublicRoleKeys.private;


function statistic_init:
    cast 0group 0group into r0 as ElgamalCipher;
    cast r0 r0 r0 into r1 as SurvivorCipher;
    output r1 as SurvivorCipher.private;


function statistic_survivors:
    input r0 as boolean.public;
    input r1 as scalar.private;
    input r2 as PublicRoleKeys.public;
    input r3 as scalar.private;
    input r4 as scalar.private;
    input r5 as scalar.private;
    input r6 as scalar.private;
    input r7 as group.public;
    input r8 as scalar.private;
    input r9 as SurvivorCipher.public;
    mul r1 group::GEN into r10;
    is.eq r10 r2.wolf1 into r11;
    is.eq r10 r2.wolf2 into r12;
    or r11 r12 into r13;
    is.eq r10 r2.wolf3 into r14;
    or r13 r14 into r15;
    is.eq r10 r2.wolf4 into r16;
    or r15 r16 into r17;
    mul r4 group::GEN into r18;
    add r9.wolf.c1 r18 into r19;
    mul r4 r7 into r20;
    add r9.wolf.c2 r20 into r21;
    mul r3 group::GEN into r22;
    add r21 r22 into r23;
    cast r19 r23 into r24 as ElgamalCipher;
    mul r5 group::GEN into r25;
    add r9.villager.c1 r25 into r26;
    mul r5 r7 into r27;
    add r9.villager.c2 r27 into r28;
    cast r26 r28 into r29 as ElgamalCipher;
    mul r6 group::GEN into r30;
    add r9.psychic.c1 r30 into r31;
    mul r6 r7 into r32;
    add r9.psychic.c2 r32 into r33;
    cast r31 r33 into r34 as ElgamalCipher;
    cast r24 r29 r34 into r35 as SurvivorCipher;
    is.eq r10 r2.villager1 into r36;
    is.eq r10 r2.villager2 into r37;
    or r36 r37 into r38;
    is.eq r10 r2.villager3 into r39;
    or r38 r39 into r40;
    is.eq r10 r2.villager4 into r41;
    or r40 r41 into r42;
    mul r4 group::GEN into r43;
    add r9.wolf.c1 r43 into r44;
    mul r4 r7 into r45;
    add r9.wolf.c2 r45 into r46;
    cast r44 r46 into r47 as ElgamalCipher;
    mul r5 group::GEN into r48;
    add r9.villager.c1 r48 into r49;
    mul r5 r7 into r50;
    add r9.villager.c2 r50 into r51;
    mul r3 group::GEN into r52;
    add r51 r52 into r53;
    cast r49 r53 into r54 as ElgamalCipher;
    mul r6 group::GEN into r55;
    add r9.psychic.c1 r55 into r56;
    mul r6 r7 into r57;
    add r9.psychic.c2 r57 into r58;
    cast r56 r58 into r59 as ElgamalCipher;
    cast r47 r54 r59 into r60 as SurvivorCipher;
    mul r4 group::GEN into r61;
    add r9.wolf.c1 r61 into r62;
    mul r4 r7 into r63;
    add r9.wolf.c2 r63 into r64;
    cast r62 r64 into r65 as ElgamalCipher;
    mul r5 group::GEN into r66;
    add r9.villager.c1 r66 into r67;
    mul r5 r7 into r68;
    add r9.villager.c2 r68 into r69;
    cast r67 r69 into r70 as ElgamalCipher;
    mul r6 group::GEN into r71;
    add r9.psychic.c1 r71 into r72;
    mul r6 r7 into r73;
    add r9.psychic.c2 r73 into r74;
    mul r3 group::GEN into r75;
    add r74 r75 into r76;
    cast r72 r76 into r77 as ElgamalCipher;
    cast r65 r70 r77 into r78 as SurvivorCipher;
    mul r9.wolf.c1 r8 into r79;
    sub r9.wolf.c2 r79 into r80;
    cast r9.wolf.c1 r80 into r81 as ElgamalCipher;
    mul r9.villager.c1 r8 into r82;
    sub r9.villager.c2 r82 into r83;
    cast r9.villager.c1 r83 into r84 as ElgamalCipher;
    mul r9.psychic.c1 r8 into r85;
    sub r9.psychic.c2 r85 into r86;
    cast r9.psychic.c1 r86 into r87 as ElgamalCipher;
    cast r81 r84 r87 into r88 as SurvivorCipher;
    not r17 into r89;
    and r0 r89 into r90;
    not r42 into r91;
    and r90 r91 into r92;
    ternary r92 r78.wolf.c1 r88.wolf.c1 into r93;
    not r17 into r94;
    and r0 r94 into r95;
    not r42 into r96;
    and r95 r96 into r97;
    ternary r97 r78.wolf.c2 r88.wolf.c2 into r98;
    cast r93 r98 into r99 as ElgamalCipher;
    not r17 into r100;
    and r0 r100 into r101;
    not r42 into r102;
    and r101 r102 into r103;
    ternary r103 r78.villager.c1 r88.villager.c1 into r104;
    not r17 into r105;
    and r0 r105 into r106;
    not r42 into r107;
    and r106 r107 into r108;
    ternary r108 r78.villager.c2 r88.villager.c2 into r109;
    cast r104 r109 into r110 as ElgamalCipher;
    not r17 into r111;
    and r0 r111 into r112;
    not r42 into r113;
    and r112 r113 into r114;
    ternary r114 r78.psychic.c1 r88.psychic.c1 into r115;
    not r17 into r116;
    and r0 r116 into r117;
    not r42 into r118;
    and r117 r118 into r119;
    ternary r119 r78.psychic.c2 r88.psychic.c2 into r120;
    cast r115 r120 into r121 as ElgamalCipher;
    cast r99 r110 r121 into r122 as SurvivorCipher;
    not r17 into r123;
    and r0 r123 into r124;
    and r124 r42 into r125;
    ternary r125 r60.wolf.c1 r122.wolf.c1 into r126;
    not r17 into r127;
    and r0 r127 into r128;
    and r128 r42 into r129;
    ternary r129 r60.wolf.c2 r122.wolf.c2 into r130;
    cast r126 r130 into r131 as ElgamalCipher;
    not r17 into r132;
    and r0 r132 into r133;
    and r133 r42 into r134;
    ternary r134 r60.villager.c1 r122.villager.c1 into r135;
    not r17 into r136;
    and r0 r136 into r137;
    and r137 r42 into r138;
    ternary r138 r60.villager.c2 r122.villager.c2 into r139;
    cast r135 r139 into r140 as ElgamalCipher;
    not r17 into r141;
    and r0 r141 into r142;
    and r142 r42 into r143;
    ternary r143 r60.psychic.c1 r122.psychic.c1 into r144;
    not r17 into r145;
    and r0 r145 into r146;
    and r146 r42 into r147;
    ternary r147 r60.psychic.c2 r122.psychic.c2 into r148;
    cast r144 r148 into r149 as ElgamalCipher;
    cast r131 r140 r149 into r150 as SurvivorCipher;
    and r0 r17 into r151;
    ternary r151 r35.wolf.c1 r150.wolf.c1 into r152;
    and r0 r17 into r153;
    ternary r153 r35.wolf.c2 r150.wolf.c2 into r154;
    cast r152 r154 into r155 as ElgamalCipher;
    and r0 r17 into r156;
    ternary r156 r35.villager.c1 r150.villager.c1 into r157;
    and r0 r17 into r158;
    ternary r158 r35.villager.c2 r150.villager.c2 into r159;
    cast r157 r159 into r160 as ElgamalCipher;
    and r0 r17 into r161;
    ternary r161 r35.psychic.c1 r150.psychic.c1 into r162;
    and r0 r17 into r163;
    ternary r163 r35.psychic.c2 r150.psychic.c2 into r164;
    cast r162 r164 into r165 as ElgamalCipher;
    cast r155 r160 r165 into r166 as SurvivorCipher;
    output r166 as SurvivorCipher.private;


function check_role_init:
    input r0 as scalar.private;
    input r1 as scalar.private;
    input r2 as scalar.private;
    input r3 as scalar.private;
    input r4 as scalar.private;
    input r5 as scalar.private;
    input r6 as scalar.private;
    input r7 as scalar.private;
    input r8 as scalar.private;
    input r9 as scalar.private;
    input r10 as scalar.private;
    input r11 as scalar.private;
    mul r0 group::GEN into r12;
    cast 0group r12 into r13 as ElgamalCipher;
    mul r1 group::GEN into r14;
    cast 0group r14 into r15 as ElgamalCipher;
    mul r2 group::GEN into r16;
    cast 0group r16 into r17 as ElgamalCipher;
    mul r3 group::GEN into r18;
    cast 0group r18 into r19 as ElgamalCipher;
    mul r4 group::GEN into r20;
    cast 0group r20 into r21 as ElgamalCipher;
    mul r5 group::GEN into r22;
    cast 0group r22 into r23 as ElgamalCipher;
    mul r6 group::GEN into r24;
    cast 0group r24 into r25 as ElgamalCipher;
    mul r7 group::GEN into r26;
    cast 0group r26 into r27 as ElgamalCipher;
    mul r8 group::GEN into r28;
    cast 0group r28 into r29 as ElgamalCipher;
    mul r9 group::GEN into r30;
    cast 0group r30 into r31 as ElgamalCipher;
    mul r10 group::GEN into r32;
    cast 0group r32 into r33 as ElgamalCipher;
    mul r11 group::GEN into r34;
    cast 0group r34 into r35 as ElgamalCipher;
    cast r13 r15 r17 r19 r21 r23 r25 r27 r29 r31 r33 r35 into r36 as CheckRoleList;
    output r36 as CheckRoleList.private;






function gen_twelve_rands:
    input r0 as scalar.private;
    input r1 as scalar.private;
    input r2 as scalar.private;
    input r3 as scalar.private;
    input r4 as scalar.private;
    input r5 as scalar.private;
    input r6 as scalar.private;
    input r7 as scalar.private;
    input r8 as scalar.private;
    input r9 as scalar.private;
    input r10 as scalar.private;
    input r11 as scalar.private;
    cast r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 into r12 as TwelveRand;
    output r12 as TwelveRand.private;


function rerand:
    input r0 as boolean.private;
    input r1 as PublicRoleKeys.public;
    input r2 as scalar.private;
    input r3 as u8.private;
    input r4 as CheckRoleList.public;
    input r5 as TwelveRand.private;
    input r6 as scalar.private;
    input r7 as u8.public;
    input r8 as scalar.private;
    gte r3 1u8 into r9;
    lte r3 12u8 into r10;
    and r9 r10 into r11;
    assert.eq r11 true;
    mul group::GEN r5.r1 into r12;
    add r4.p1.c1 r12 into r13;
    mul r1.seer r5.r1 into r14;
    add r4.p1.c2 r14 into r15;
    cast r13 r15 into r16 as ElgamalCipher;
    mul group::GEN r5.r2 into r17;
    add r4.p2.c1 r17 into r18;
    mul r1.seer r5.r2 into r19;
    add r4.p2.c2 r19 into r20;
    cast r18 r20 into r21 as ElgamalCipher;
    mul group::GEN r5.r3 into r22;
    add r4.p3.c1 r22 into r23;
    mul r1.seer r5.r3 into r24;
    add r4.p3.c2 r24 into r25;
    cast r23 r25 into r26 as ElgamalCipher;
    mul group::GEN r5.r4 into r27;
    add r4.p4.c1 r27 into r28;
    mul r1.seer r5.r4 into r29;
    add r4.p4.c2 r29 into r30;
    cast r28 r30 into r31 as ElgamalCipher;
    mul group::GEN r5.r5 into r32;
    add r4.p5.c1 r32 into r33;
    mul r1.seer r5.r5 into r34;
    add r4.p5.c2 r34 into r35;
    cast r33 r35 into r36 as ElgamalCipher;
    mul group::GEN r5.r6 into r37;
    add r4.p6.c1 r37 into r38;
    mul r1.seer r5.r6 into r39;
    add r4.p6.c2 r39 into r40;
    cast r38 r40 into r41 as ElgamalCipher;
    mul group::GEN r5.r7 into r42;
    add r4.p7.c1 r42 into r43;
    mul r1.seer r5.r7 into r44;
    add r4.p7.c2 r44 into r45;
    cast r43 r45 into r46 as ElgamalCipher;
    mul group::GEN r5.r8 into r47;
    add r4.p8.c1 r47 into r48;
    mul r1.seer r5.r8 into r49;
    add r4.p8.c2 r49 into r50;
    cast r48 r50 into r51 as ElgamalCipher;
    mul group::GEN r5.r9 into r52;
    add r4.p9.c1 r52 into r53;
    mul r1.seer r5.r9 into r54;
    add r4.p9.c2 r54 into r55;
    cast r53 r55 into r56 as ElgamalCipher;
    mul group::GEN r5.r10 into r57;
    add r4.p10.c1 r57 into r58;
    mul r1.seer r5.r10 into r59;
    add r4.p10.c2 r59 into r60;
    cast r58 r60 into r61 as ElgamalCipher;
    mul group::GEN r5.r11 into r62;
    add r4.p11.c1 r62 into r63;
    mul r1.seer r5.r11 into r64;
    add r4.p11.c2 r64 into r65;
    cast r63 r65 into r66 as ElgamalCipher;
    mul group::GEN r5.r12 into r67;
    add r4.p12.c1 r67 into r68;
    mul r1.seer r5.r12 into r69;
    add r4.p12.c2 r69 into r70;
    cast r68 r70 into r71 as ElgamalCipher;
    mul group::GEN r6 into r72;
    mul r1.seer r6 into r73;
    cast r72 r73 into r74 as ElgamalCipher;
    mul r2 group::GEN into r75;
    is.eq r75 r1.seer into r76;
    is.eq r3 1u8 into r77;
    ternary r77 r74.c1 r16.c1 into r78;
    ternary r77 r74.c2 r16.c2 into r79;
    cast r78 r79 into r80 as ElgamalCipher;
    is.eq r3 2u8 into r81;
    ternary r81 r74.c1 r21.c1 into r82;
    ternary r81 r74.c2 r21.c2 into r83;
    cast r82 r83 into r84 as ElgamalCipher;
    is.eq r3 3u8 into r85;
    ternary r85 r74.c1 r26.c1 into r86;
    ternary r85 r74.c2 r26.c2 into r87;
    cast r86 r87 into r88 as ElgamalCipher;
    is.eq r3 4u8 into r89;
    ternary r89 r74.c1 r31.c1 into r90;
    ternary r89 r74.c2 r31.c2 into r91;
    cast r90 r91 into r92 as ElgamalCipher;
    is.eq r3 5u8 into r93;
    ternary r93 r74.c1 r36.c1 into r94;
    ternary r93 r74.c2 r36.c2 into r95;
    cast r94 r95 into r96 as ElgamalCipher;
    is.eq r3 6u8 into r97;
    ternary r97 r74.c1 r41.c1 into r98;
    ternary r97 r74.c2 r41.c2 into r99;
    cast r98 r99 into r100 as ElgamalCipher;
    is.eq r3 7u8 into r101;
    ternary r101 r74.c1 r46.c1 into r102;
    ternary r101 r74.c2 r46.c2 into r103;
    cast r102 r103 into r104 as ElgamalCipher;
    is.eq r3 8u8 into r105;
    ternary r105 r74.c1 r51.c1 into r106;
    ternary r105 r74.c2 r51.c2 into r107;
    cast r106 r107 into r108 as ElgamalCipher;
    is.eq r3 9u8 into r109;
    ternary r109 r74.c1 r56.c1 into r110;
    ternary r109 r74.c2 r56.c2 into r111;
    cast r110 r111 into r112 as ElgamalCipher;
    is.eq r3 10u8 into r113;
    ternary r113 r74.c1 r61.c1 into r114;
    ternary r113 r74.c2 r61.c2 into r115;
    cast r114 r115 into r116 as ElgamalCipher;
    is.eq r3 11u8 into r117;
    ternary r117 r74.c1 r66.c1 into r118;
    ternary r117 r74.c2 r66.c2 into r119;
    cast r118 r119 into r120 as ElgamalCipher;
    is.eq r3 12u8 into r121;
    ternary r121 r74.c1 r71.c1 into r122;
    ternary r121 r74.c2 r71.c2 into r123;
    cast r122 r123 into r124 as ElgamalCipher;
    cast r80 r84 r88 r92 r96 r100 r104 r108 r112 r116 r120 r124 into r125 as CheckRoleList;
    cast r16 r21 r26 r31 r36 r41 r46 r51 r56 r61 r66 r71 into r126 as CheckRoleList;
    is.neq r7 1u8 into r127;
    mul r2 group::GEN into r128;
    is.eq r128 r1.wolf1 into r129;
    mul r2 group::GEN into r130;
    is.eq r130 r1.wolf2 into r131;
    or r129 r131 into r132;
    mul r2 group::GEN into r133;
    is.eq r133 r1.wolf3 into r134;
    or r132 r134 into r135;
    mul r2 group::GEN into r136;
    is.eq r136 r1.wolf4 into r137;
    or r135 r137 into r138;
    mul r4.p1.c1 r8 into r139;
    mul r4.p1.c2 r8 into r140;
    add r140 group::GEN into r141;
    cast r139 r141 into r142 as ElgamalCipher;
    mul r4.p1.c1 r8 into r143;
    mul r4.p1.c2 r8 into r144;
    cast r143 r144 into r145 as ElgamalCipher;
    not r127 into r146;
    and r146 r138 into r147;
    ternary r147 r142.c1 r145.c1 into r148;
    not r127 into r149;
    and r149 r138 into r150;
    ternary r150 r142.c2 r145.c2 into r151;
    cast r148 r151 into r152 as ElgamalCipher;
    ternary r127 r4.p1.c1 r152.c1 into r153;
    ternary r127 r4.p1.c2 r152.c2 into r154;
    cast r153 r154 into r155 as ElgamalCipher;
    is.neq r7 2u8 into r156;
    mul r2 group::GEN into r157;
    is.eq r157 r1.wolf1 into r158;
    mul r2 group::GEN into r159;
    is.eq r159 r1.wolf2 into r160;
    or r158 r160 into r161;
    mul r2 group::GEN into r162;
    is.eq r162 r1.wolf3 into r163;
    or r161 r163 into r164;
    mul r2 group::GEN into r165;
    is.eq r165 r1.wolf4 into r166;
    or r164 r166 into r167;
    mul r4.p2.c1 r8 into r168;
    mul r4.p2.c2 r8 into r169;
    add r169 group::GEN into r170;
    cast r168 r170 into r171 as ElgamalCipher;
    mul r4.p2.c1 r8 into r172;
    mul r4.p2.c2 r8 into r173;
    cast r172 r173 into r174 as ElgamalCipher;
    not r156 into r175;
    and r175 r167 into r176;
    ternary r176 r171.c1 r174.c1 into r177;
    not r156 into r178;
    and r178 r167 into r179;
    ternary r179 r171.c2 r174.c2 into r180;
    cast r177 r180 into r181 as ElgamalCipher;
    ternary r156 r4.p2.c1 r181.c1 into r182;
    ternary r156 r4.p2.c2 r181.c2 into r183;
    cast r182 r183 into r184 as ElgamalCipher;
    is.neq r7 3u8 into r185;
    mul r2 group::GEN into r186;
    is.eq r186 r1.wolf1 into r187;
    mul r2 group::GEN into r188;
    is.eq r188 r1.wolf2 into r189;
    or r187 r189 into r190;
    mul r2 group::GEN into r191;
    is.eq r191 r1.wolf3 into r192;
    or r190 r192 into r193;
    mul r2 group::GEN into r194;
    is.eq r194 r1.wolf4 into r195;
    or r193 r195 into r196;
    mul r4.p3.c1 r8 into r197;
    mul r4.p3.c2 r8 into r198;
    add r198 group::GEN into r199;
    cast r197 r199 into r200 as ElgamalCipher;
    mul r4.p3.c1 r8 into r201;
    mul r4.p3.c2 r8 into r202;
    cast r201 r202 into r203 as ElgamalCipher;
    not r185 into r204;
    and r204 r196 into r205;
    ternary r205 r200.c1 r203.c1 into r206;
    not r185 into r207;
    and r207 r196 into r208;
    ternary r208 r200.c2 r203.c2 into r209;
    cast r206 r209 into r210 as ElgamalCipher;
    ternary r185 r4.p3.c1 r210.c1 into r211;
    ternary r185 r4.p3.c2 r210.c2 into r212;
    cast r211 r212 into r213 as ElgamalCipher;
    is.neq r7 4u8 into r214;
    mul r2 group::GEN into r215;
    is.eq r215 r1.wolf1 into r216;
    mul r2 group::GEN into r217;
    is.eq r217 r1.wolf2 into r218;
    or r216 r218 into r219;
    mul r2 group::GEN into r220;
    is.eq r220 r1.wolf3 into r221;
    or r219 r221 into r222;
    mul r2 group::GEN into r223;
    is.eq r223 r1.wolf4 into r224;
    or r222 r224 into r225;
    mul r4.p4.c1 r8 into r226;
    mul r4.p4.c2 r8 into r227;
    add r227 group::GEN into r228;
    cast r226 r228 into r229 as ElgamalCipher;
    mul r4.p4.c1 r8 into r230;
    mul r4.p4.c2 r8 into r231;
    cast r230 r231 into r232 as ElgamalCipher;
    not r214 into r233;
    and r233 r225 into r234;
    ternary r234 r229.c1 r232.c1 into r235;
    not r214 into r236;
    and r236 r225 into r237;
    ternary r237 r229.c2 r232.c2 into r238;
    cast r235 r238 into r239 as ElgamalCipher;
    ternary r214 r4.p4.c1 r239.c1 into r240;
    ternary r214 r4.p4.c2 r239.c2 into r241;
    cast r240 r241 into r242 as ElgamalCipher;
    is.neq r7 5u8 into r243;
    mul r2 group::GEN into r244;
    is.eq r244 r1.wolf1 into r245;
    mul r2 group::GEN into r246;
    is.eq r246 r1.wolf2 into r247;
    or r245 r247 into r248;
    mul r2 group::GEN into r249;
    is.eq r249 r1.wolf3 into r250;
    or r248 r250 into r251;
    mul r2 group::GEN into r252;
    is.eq r252 r1.wolf4 into r253;
    or r251 r253 into r254;
    mul r4.p5.c1 r8 into r255;
    mul r4.p5.c2 r8 into r256;
    add r256 group::GEN into r257;
    cast r255 r257 into r258 as ElgamalCipher;
    mul r4.p5.c1 r8 into r259;
    mul r4.p5.c2 r8 into r260;
    cast r259 r260 into r261 as ElgamalCipher;
    not r243 into r262;
    and r262 r254 into r263;
    ternary r263 r258.c1 r261.c1 into r264;
    not r243 into r265;
    and r265 r254 into r266;
    ternary r266 r258.c2 r261.c2 into r267;
    cast r264 r267 into r268 as ElgamalCipher;
    ternary r243 r4.p5.c1 r268.c1 into r269;
    ternary r243 r4.p5.c2 r268.c2 into r270;
    cast r269 r270 into r271 as ElgamalCipher;
    is.neq r7 6u8 into r272;
    mul r2 group::GEN into r273;
    is.eq r273 r1.wolf1 into r274;
    mul r2 group::GEN into r275;
    is.eq r275 r1.wolf2 into r276;
    or r274 r276 into r277;
    mul r2 group::GEN into r278;
    is.eq r278 r1.wolf3 into r279;
    or r277 r279 into r280;
    mul r2 group::GEN into r281;
    is.eq r281 r1.wolf4 into r282;
    or r280 r282 into r283;
    mul r4.p6.c1 r8 into r284;
    mul r4.p6.c2 r8 into r285;
    add r285 group::GEN into r286;
    cast r284 r286 into r287 as ElgamalCipher;
    mul r4.p6.c1 r8 into r288;
    mul r4.p6.c2 r8 into r289;
    cast r288 r289 into r290 as ElgamalCipher;
    not r272 into r291;
    and r291 r283 into r292;
    ternary r292 r287.c1 r290.c1 into r293;
    not r272 into r294;
    and r294 r283 into r295;
    ternary r295 r287.c2 r290.c2 into r296;
    cast r293 r296 into r297 as ElgamalCipher;
    ternary r272 r4.p6.c1 r297.c1 into r298;
    ternary r272 r4.p6.c2 r297.c2 into r299;
    cast r298 r299 into r300 as ElgamalCipher;
    is.neq r7 7u8 into r301;
    mul r2 group::GEN into r302;
    is.eq r302 r1.wolf1 into r303;
    mul r2 group::GEN into r304;
    is.eq r304 r1.wolf2 into r305;
    or r303 r305 into r306;
    mul r2 group::GEN into r307;
    is.eq r307 r1.wolf3 into r308;
    or r306 r308 into r309;
    mul r2 group::GEN into r310;
    is.eq r310 r1.wolf4 into r311;
    or r309 r311 into r312;
    mul r4.p7.c1 r8 into r313;
    mul r4.p7.c2 r8 into r314;
    add r314 group::GEN into r315;
    cast r313 r315 into r316 as ElgamalCipher;
    mul r4.p7.c1 r8 into r317;
    mul r4.p7.c2 r8 into r318;
    cast r317 r318 into r319 as ElgamalCipher;
    not r301 into r320;
    and r320 r312 into r321;
    ternary r321 r316.c1 r319.c1 into r322;
    not r301 into r323;
    and r323 r312 into r324;
    ternary r324 r316.c2 r319.c2 into r325;
    cast r322 r325 into r326 as ElgamalCipher;
    ternary r301 r4.p7.c1 r326.c1 into r327;
    ternary r301 r4.p7.c2 r326.c2 into r328;
    cast r327 r328 into r329 as ElgamalCipher;
    is.neq r7 8u8 into r330;
    mul r2 group::GEN into r331;
    is.eq r331 r1.wolf1 into r332;
    mul r2 group::GEN into r333;
    is.eq r333 r1.wolf2 into r334;
    or r332 r334 into r335;
    mul r2 group::GEN into r336;
    is.eq r336 r1.wolf3 into r337;
    or r335 r337 into r338;
    mul r2 group::GEN into r339;
    is.eq r339 r1.wolf4 into r340;
    or r338 r340 into r341;
    mul r4.p8.c1 r8 into r342;
    mul r4.p8.c2 r8 into r343;
    add r343 group::GEN into r344;
    cast r342 r344 into r345 as ElgamalCipher;
    mul r4.p8.c1 r8 into r346;
    mul r4.p8.c2 r8 into r347;
    cast r346 r347 into r348 as ElgamalCipher;
    not r330 into r349;
    and r349 r341 into r350;
    ternary r350 r345.c1 r348.c1 into r351;
    not r330 into r352;
    and r352 r341 into r353;
    ternary r353 r345.c2 r348.c2 into r354;
    cast r351 r354 into r355 as ElgamalCipher;
    ternary r330 r4.p8.c1 r355.c1 into r356;
    ternary r330 r4.p8.c2 r355.c2 into r357;
    cast r356 r357 into r358 as ElgamalCipher;
    is.neq r7 9u8 into r359;
    mul r2 group::GEN into r360;
    is.eq r360 r1.wolf1 into r361;
    mul r2 group::GEN into r362;
    is.eq r362 r1.wolf2 into r363;
    or r361 r363 into r364;
    mul r2 group::GEN into r365;
    is.eq r365 r1.wolf3 into r366;
    or r364 r366 into r367;
    mul r2 group::GEN into r368;
    is.eq r368 r1.wolf4 into r369;
    or r367 r369 into r370;
    mul r4.p9.c1 r8 into r371;
    mul r4.p9.c2 r8 into r372;
    add r372 group::GEN into r373;
    cast r371 r373 into r374 as ElgamalCipher;
    mul r4.p9.c1 r8 into r375;
    mul r4.p9.c2 r8 into r376;
    cast r375 r376 into r377 as ElgamalCipher;
    not r359 into r378;
    and r378 r370 into r379;
    ternary r379 r374.c1 r377.c1 into r380;
    not r359 into r381;
    and r381 r370 into r382;
    ternary r382 r374.c2 r377.c2 into r383;
    cast r380 r383 into r384 as ElgamalCipher;
    ternary r359 r4.p9.c1 r384.c1 into r385;
    ternary r359 r4.p9.c2 r384.c2 into r386;
    cast r385 r386 into r387 as ElgamalCipher;
    is.neq r7 10u8 into r388;
    mul r2 group::GEN into r389;
    is.eq r389 r1.wolf1 into r390;
    mul r2 group::GEN into r391;
    is.eq r391 r1.wolf2 into r392;
    or r390 r392 into r393;
    mul r2 group::GEN into r394;
    is.eq r394 r1.wolf3 into r395;
    or r393 r395 into r396;
    mul r2 group::GEN into r397;
    is.eq r397 r1.wolf4 into r398;
    or r396 r398 into r399;
    mul r4.p10.c1 r8 into r400;
    mul r4.p10.c2 r8 into r401;
    add r401 group::GEN into r402;
    cast r400 r402 into r403 as ElgamalCipher;
    mul r4.p10.c1 r8 into r404;
    mul r4.p10.c2 r8 into r405;
    cast r404 r405 into r406 as ElgamalCipher;
    not r388 into r407;
    and r407 r399 into r408;
    ternary r408 r403.c1 r406.c1 into r409;
    not r388 into r410;
    and r410 r399 into r411;
    ternary r411 r403.c2 r406.c2 into r412;
    cast r409 r412 into r413 as ElgamalCipher;
    ternary r388 r4.p10.c1 r413.c1 into r414;
    ternary r388 r4.p10.c2 r413.c2 into r415;
    cast r414 r415 into r416 as ElgamalCipher;
    is.neq r7 11u8 into r417;
    mul r2 group::GEN into r418;
    is.eq r418 r1.wolf1 into r419;
    mul r2 group::GEN into r420;
    is.eq r420 r1.wolf2 into r421;
    or r419 r421 into r422;
    mul r2 group::GEN into r423;
    is.eq r423 r1.wolf3 into r424;
    or r422 r424 into r425;
    mul r2 group::GEN into r426;
    is.eq r426 r1.wolf4 into r427;
    or r425 r427 into r428;
    mul r4.p11.c1 r8 into r429;
    mul r4.p11.c2 r8 into r430;
    add r430 group::GEN into r431;
    cast r429 r431 into r432 as ElgamalCipher;
    mul r4.p11.c1 r8 into r433;
    mul r4.p11.c2 r8 into r434;
    cast r433 r434 into r435 as ElgamalCipher;
    not r417 into r436;
    and r436 r428 into r437;
    ternary r437 r432.c1 r435.c1 into r438;
    not r417 into r439;
    and r439 r428 into r440;
    ternary r440 r432.c2 r435.c2 into r441;
    cast r438 r441 into r442 as ElgamalCipher;
    ternary r417 r4.p11.c1 r442.c1 into r443;
    ternary r417 r4.p11.c2 r442.c2 into r444;
    cast r443 r444 into r445 as ElgamalCipher;
    is.neq r7 12u8 into r446;
    mul r2 group::GEN into r447;
    is.eq r447 r1.wolf1 into r448;
    mul r2 group::GEN into r449;
    is.eq r449 r1.wolf2 into r450;
    or r448 r450 into r451;
    mul r2 group::GEN into r452;
    is.eq r452 r1.wolf3 into r453;
    or r451 r453 into r454;
    mul r2 group::GEN into r455;
    is.eq r455 r1.wolf4 into r456;
    or r454 r456 into r457;
    mul r4.p12.c1 r8 into r458;
    mul r4.p12.c2 r8 into r459;
    add r459 group::GEN into r460;
    cast r458 r460 into r461 as ElgamalCipher;
    mul r4.p12.c1 r8 into r462;
    mul r4.p12.c2 r8 into r463;
    cast r462 r463 into r464 as ElgamalCipher;
    not r446 into r465;
    and r465 r457 into r466;
    ternary r466 r461.c1 r464.c1 into r467;
    not r446 into r468;
    and r468 r457 into r469;
    ternary r469 r461.c2 r464.c2 into r470;
    cast r467 r470 into r471 as ElgamalCipher;
    ternary r446 r4.p12.c1 r471.c1 into r472;
    ternary r446 r4.p12.c2 r471.c2 into r473;
    cast r472 r473 into r474 as ElgamalCipher;
    cast r155 r184 r213 r242 r271 r300 r329 r358 r387 r416 r445 r474 into r475 as CheckRoleList;
    not r76 into r476;
    and r0 r476 into r477;
    ternary r477 r126.p1.c1 r475.p1.c1 into r478;
    not r76 into r479;
    and r0 r479 into r480;
    ternary r480 r126.p1.c2 r475.p1.c2 into r481;
    cast r478 r481 into r482 as ElgamalCipher;
    not r76 into r483;
    and r0 r483 into r484;
    ternary r484 r126.p2.c1 r475.p2.c1 into r485;
    not r76 into r486;
    and r0 r486 into r487;
    ternary r487 r126.p2.c2 r475.p2.c2 into r488;
    cast r485 r488 into r489 as ElgamalCipher;
    not r76 into r490;
    and r0 r490 into r491;
    ternary r491 r126.p3.c1 r475.p3.c1 into r492;
    not r76 into r493;
    and r0 r493 into r494;
    ternary r494 r126.p3.c2 r475.p3.c2 into r495;
    cast r492 r495 into r496 as ElgamalCipher;
    not r76 into r497;
    and r0 r497 into r498;
    ternary r498 r126.p4.c1 r475.p4.c1 into r499;
    not r76 into r500;
    and r0 r500 into r501;
    ternary r501 r126.p4.c2 r475.p4.c2 into r502;
    cast r499 r502 into r503 as ElgamalCipher;
    not r76 into r504;
    and r0 r504 into r505;
    ternary r505 r126.p5.c1 r475.p5.c1 into r506;
    not r76 into r507;
    and r0 r507 into r508;
    ternary r508 r126.p5.c2 r475.p5.c2 into r509;
    cast r506 r509 into r510 as ElgamalCipher;
    not r76 into r511;
    and r0 r511 into r512;
    ternary r512 r126.p6.c1 r475.p6.c1 into r513;
    not r76 into r514;
    and r0 r514 into r515;
    ternary r515 r126.p6.c2 r475.p6.c2 into r516;
    cast r513 r516 into r517 as ElgamalCipher;
    not r76 into r518;
    and r0 r518 into r519;
    ternary r519 r126.p7.c1 r475.p7.c1 into r520;
    not r76 into r521;
    and r0 r521 into r522;
    ternary r522 r126.p7.c2 r475.p7.c2 into r523;
    cast r520 r523 into r524 as ElgamalCipher;
    not r76 into r525;
    and r0 r525 into r526;
    ternary r526 r126.p8.c1 r475.p8.c1 into r527;
    not r76 into r528;
    and r0 r528 into r529;
    ternary r529 r126.p8.c2 r475.p8.c2 into r530;
    cast r527 r530 into r531 as ElgamalCipher;
    not r76 into r532;
    and r0 r532 into r533;
    ternary r533 r126.p9.c1 r475.p9.c1 into r534;
    not r76 into r535;
    and r0 r535 into r536;
    ternary r536 r126.p9.c2 r475.p9.c2 into r537;
    cast r534 r537 into r538 as ElgamalCipher;
    not r76 into r539;
    and r0 r539 into r540;
    ternary r540 r126.p10.c1 r475.p10.c1 into r541;
    not r76 into r542;
    and r0 r542 into r543;
    ternary r543 r126.p10.c2 r475.p10.c2 into r544;
    cast r541 r544 into r545 as ElgamalCipher;
    not r76 into r546;
    and r0 r546 into r547;
    ternary r547 r126.p11.c1 r475.p11.c1 into r548;
    not r76 into r549;
    and r0 r549 into r550;
    ternary r550 r126.p11.c2 r475.p11.c2 into r551;
    cast r548 r551 into r552 as ElgamalCipher;
    not r76 into r553;
    and r0 r553 into r554;
    ternary r554 r126.p12.c1 r475.p12.c1 into r555;
    not r76 into r556;
    and r0 r556 into r557;
    ternary r557 r126.p12.c2 r475.p12.c2 into r558;
    cast r555 r558 into r559 as ElgamalCipher;
    cast r482 r489 r496 r503 r510 r517 r524 r531 r538 r545 r552 r559 into r560 as CheckRoleList;
    and r0 r76 into r561;
    ternary r561 r125.p1.c1 r560.p1.c1 into r562;
    and r0 r76 into r563;
    ternary r563 r125.p1.c2 r560.p1.c2 into r564;
    cast r562 r564 into r565 as ElgamalCipher;
    and r0 r76 into r566;
    ternary r566 r125.p2.c1 r560.p2.c1 into r567;
    and r0 r76 into r568;
    ternary r568 r125.p2.c2 r560.p2.c2 into r569;
    cast r567 r569 into r570 as ElgamalCipher;
    and r0 r76 into r571;
    ternary r571 r125.p3.c1 r560.p3.c1 into r572;
    and r0 r76 into r573;
    ternary r573 r125.p3.c2 r560.p3.c2 into r574;
    cast r572 r574 into r575 as ElgamalCipher;
    and r0 r76 into r576;
    ternary r576 r125.p4.c1 r560.p4.c1 into r577;
    and r0 r76 into r578;
    ternary r578 r125.p4.c2 r560.p4.c2 into r579;
    cast r577 r579 into r580 as ElgamalCipher;
    and r0 r76 into r581;
    ternary r581 r125.p5.c1 r560.p5.c1 into r582;
    and r0 r76 into r583;
    ternary r583 r125.p5.c2 r560.p5.c2 into r584;
    cast r582 r584 into r585 as ElgamalCipher;
    and r0 r76 into r586;
    ternary r586 r125.p6.c1 r560.p6.c1 into r587;
    and r0 r76 into r588;
    ternary r588 r125.p6.c2 r560.p6.c2 into r589;
    cast r587 r589 into r590 as ElgamalCipher;
    and r0 r76 into r591;
    ternary r591 r125.p7.c1 r560.p7.c1 into r592;
    and r0 r76 into r593;
    ternary r593 r125.p7.c2 r560.p7.c2 into r594;
    cast r592 r594 into r595 as ElgamalCipher;
    and r0 r76 into r596;
    ternary r596 r125.p8.c1 r560.p8.c1 into r597;
    and r0 r76 into r598;
    ternary r598 r125.p8.c2 r560.p8.c2 into r599;
    cast r597 r599 into r600 as ElgamalCipher;
    and r0 r76 into r601;
    ternary r601 r125.p9.c1 r560.p9.c1 into r602;
    and r0 r76 into r603;
    ternary r603 r125.p9.c2 r560.p9.c2 into r604;
    cast r602 r604 into r605 as ElgamalCipher;
    and r0 r76 into r606;
    ternary r606 r125.p10.c1 r560.p10.c1 into r607;
    and r0 r76 into r608;
    ternary r608 r125.p10.c2 r560.p10.c2 into r609;
    cast r607 r609 into r610 as ElgamalCipher;
    and r0 r76 into r611;
    ternary r611 r125.p11.c1 r560.p11.c1 into r612;
    and r0 r76 into r613;
    ternary r613 r125.p11.c2 r560.p11.c2 into r614;
    cast r612 r614 into r615 as ElgamalCipher;
    and r0 r76 into r616;
    ternary r616 r125.p12.c1 r560.p12.c1 into r617;
    and r0 r76 into r618;
    ternary r618 r125.p12.c2 r560.p12.c2 into r619;
    cast r617 r619 into r620 as ElgamalCipher;
    cast r565 r570 r575 r580 r585 r590 r595 r600 r605 r610 r615 r620 into r621 as CheckRoleList;
    output r621 as CheckRoleList.private;


function dec_check_role:
    input r0 as scalar.private;
    input r1 as ElgamalCipher.private;
    mul r1.c1 r0 into r2;
    sub r1.c2 r2 into r3;
    is.eq r3 group::GEN into r4;
    output r4 as boolean.private;


function kill_init:
    cast 0group 0group into r0 as ElgamalCipher;
    cast 0group 0group into r1 as ElgamalCipher;
    cast 0group 0group into r2 as ElgamalCipher;
    cast r0 r1 r2 into r3 as KillCipher;
    output r3 as KillCipher.private;


function kill_vote:
    input r0 as group.public;
    input r1 as scalar.private;
    input r2 as group.private;
    input r3 as group.private;
    input r4 as PublicRoleKeys.private;
    input r5 as group.private;
    input r6 as scalar.private;
    input r7 as scalar.private;
    input r8 as scalar.private;
    input r9 as group.public;
    input r10 as KillCipher.public;
    mul group::GEN r6 into r11;
    add r10.kc1.c1 r11 into r12;
    mul r0 r6 into r13;
    add r10.kc1.c2 r13 into r14;
    cast r12 r14 into r15 as ElgamalCipher;
    mul r1 group::GEN into r16;
    is.eq r16 r5 into r17;
    add r15.c2 r2 into r18;
    cast r15.c1 r18 into r19 as ElgamalCipher;
    ternary r17 r19.c1 r15.c1 into r20;
    ternary r17 r19.c2 r15.c2 into r21;
    cast r20 r21 into r22 as ElgamalCipher;
    mul group::GEN r7 into r23;
    add r10.kc2.c1 r23 into r24;
    mul r0 r7 into r25;
    add r10.kc2.c2 r25 into r26;
    cast r24 r26 into r27 as ElgamalCipher;
    mul r1 group::GEN into r28;
    is.eq r28 r4.protector into r29;
    add r27.c2 r3 into r30;
    cast r27.c1 r30 into r31 as ElgamalCipher;
    ternary r29 r31.c1 r27.c1 into r32;
    ternary r29 r31.c2 r27.c2 into r33;
    cast r32 r33 into r34 as ElgamalCipher;
    mul group::GEN r8 into r35;
    add r10.kc3.c1 r35 into r36;
    mul r0 r8 into r37;
    add r10.kc3.c2 r37 into r38;
    mul r9 r8 into r39;
    add r38 r39 into r40;
    cast r36 r40 into r41 as ElgamalCipher;
    cast r22 r34 r41 into r42 as KillCipher;
    output r42 as KillCipher.private;


function dec_kill_vote:
    input r0 as KillCipher.public;
    input r1 as scalar.private;
    input r2 as u8.public;
    input r3 as boolean.public;
    input r4 as scalar.private;
    input r5 as scalar.private;
    input r6 as group.public;
    input r7 as boolean.private;
    input r8 as group.public;
    gte r2 1u8 into r9;
    lte r2 4u8 into r10;
    and r9 r10 into r11;
    assert.eq r11 true;
    sub r0.kc2.c1 r0.kc1.c1 into r12;
    sub r0.kc2.c2 r0.kc1.c2 into r13;
    cast r12 r13 into r14 as ElgamalCipher;
    cast r0.kc1 r14 r0.kc3 into r15 as KillCipher;
    is.eq r2 1u8 into r16;
    mul r5 group::GEN into r17;
    is.eq r17 r6 into r18;
    and r18 r7 into r19;
    mul r8 r4 into r20;
    cast r0.kc1.c1 r20 into r21 as ElgamalCipher;
    cast r21 r0.kc2 r0.kc3 into r22 as KillCipher;
    mul r0.kc1.c1 r1 into r23;
    sub r0.kc1.c2 r23 into r24;
    cast r0.kc1.c1 r24 into r25 as ElgamalCipher;
    cast r25 r0.kc2 r0.kc3 into r26 as KillCipher;
    is.eq r2 2u8 into r27;
    mul r0.kc2.c1 r4 into r28;
    mul r0.kc2.c2 r4 into r29;
    cast r28 r29 into r30 as ElgamalCipher;
    cast r0.kc1 r30 r0.kc3 into r31 as KillCipher;
    is.eq r2 3u8 into r32;
    mul r0.kc2.c1 r1 into r33;
    sub r0.kc2.c2 r33 into r34;
    cast r0.kc2.c1 r34 into r35 as ElgamalCipher;
    cast r0.kc1 r35 r0.kc3 into r36 as KillCipher;
    mul r0.kc3.c1 r1 into r37;
    sub r0.kc3.c2 r37 into r38;
    cast r0.kc3.c1 r38 into r39 as ElgamalCipher;
    cast r0.kc1 r0.kc2 r39 into r40 as KillCipher;
    not r3 into r41;
    not r16 into r42;
    and r41 r42 into r43;
    not r27 into r44;
    and r43 r44 into r45;
    and r45 r32 into r46;
    ternary r46 r36.kc1.c1 r40.kc1.c1 into r47;
    not r3 into r48;
    not r16 into r49;
    and r48 r49 into r50;
    not r27 into r51;
    and r50 r51 into r52;
    and r52 r32 into r53;
    ternary r53 r36.kc1.c2 r40.kc1.c2 into r54;
    cast r47 r54 into r55 as ElgamalCipher;
    not r3 into r56;
    not r16 into r57;
    and r56 r57 into r58;
    not r27 into r59;
    and r58 r59 into r60;
    and r60 r32 into r61;
    ternary r61 r36.kc2.c1 r40.kc2.c1 into r62;
    not r3 into r63;
    not r16 into r64;
    and r63 r64 into r65;
    not r27 into r66;
    and r65 r66 into r67;
    and r67 r32 into r68;
    ternary r68 r36.kc2.c2 r40.kc2.c2 into r69;
    cast r62 r69 into r70 as ElgamalCipher;
    not r3 into r71;
    not r16 into r72;
    and r71 r72 into r73;
    not r27 into r74;
    and r73 r74 into r75;
    and r75 r32 into r76;
    ternary r76 r36.kc3.c1 r40.kc3.c1 into r77;
    not r3 into r78;
    not r16 into r79;
    and r78 r79 into r80;
    not r27 into r81;
    and r80 r81 into r82;
    and r82 r32 into r83;
    ternary r83 r36.kc3.c2 r40.kc3.c2 into r84;
    cast r77 r84 into r85 as ElgamalCipher;
    cast r55 r70 r85 into r86 as KillCipher;
    not r3 into r87;
    not r16 into r88;
    and r87 r88 into r89;
    and r89 r27 into r90;
    ternary r90 r31.kc1.c1 r86.kc1.c1 into r91;
    not r3 into r92;
    not r16 into r93;
    and r92 r93 into r94;
    and r94 r27 into r95;
    ternary r95 r31.kc1.c2 r86.kc1.c2 into r96;
    cast r91 r96 into r97 as ElgamalCipher;
    not r3 into r98;
    not r16 into r99;
    and r98 r99 into r100;
    and r100 r27 into r101;
    ternary r101 r31.kc2.c1 r86.kc2.c1 into r102;
    not r3 into r103;
    not r16 into r104;
    and r103 r104 into r105;
    and r105 r27 into r106;
    ternary r106 r31.kc2.c2 r86.kc2.c2 into r107;
    cast r102 r107 into r108 as ElgamalCipher;
    not r3 into r109;
    not r16 into r110;
    and r109 r110 into r111;
    and r111 r27 into r112;
    ternary r112 r31.kc3.c1 r86.kc3.c1 into r113;
    not r3 into r114;
    not r16 into r115;
    and r114 r115 into r116;
    and r116 r27 into r117;
    ternary r117 r31.kc3.c2 r86.kc3.c2 into r118;
    cast r113 r118 into r119 as ElgamalCipher;
    cast r97 r108 r119 into r120 as KillCipher;
    not r3 into r121;
    and r121 r16 into r122;
    not r19 into r123;
    and r122 r123 into r124;
    ternary r124 r26.kc1.c1 r120.kc1.c1 into r125;
    not r3 into r126;
    and r126 r16 into r127;
    not r19 into r128;
    and r127 r128 into r129;
    ternary r129 r26.kc1.c2 r120.kc1.c2 into r130;
    cast r125 r130 into r131 as ElgamalCipher;
    not r3 into r132;
    and r132 r16 into r133;
    not r19 into r134;
    and r133 r134 into r135;
    ternary r135 r26.kc2.c1 r120.kc2.c1 into r136;
    not r3 into r137;
    and r137 r16 into r138;
    not r19 into r139;
    and r138 r139 into r140;
    ternary r140 r26.kc2.c2 r120.kc2.c2 into r141;
    cast r136 r141 into r142 as ElgamalCipher;
    not r3 into r143;
    and r143 r16 into r144;
    not r19 into r145;
    and r144 r145 into r146;
    ternary r146 r26.kc3.c1 r120.kc3.c1 into r147;
    not r3 into r148;
    and r148 r16 into r149;
    not r19 into r150;
    and r149 r150 into r151;
    ternary r151 r26.kc3.c2 r120.kc3.c2 into r152;
    cast r147 r152 into r153 as ElgamalCipher;
    cast r131 r142 r153 into r154 as KillCipher;
    not r3 into r155;
    and r155 r16 into r156;
    and r156 r19 into r157;
    ternary r157 r22.kc1.c1 r154.kc1.c1 into r158;
    not r3 into r159;
    and r159 r16 into r160;
    and r160 r19 into r161;
    ternary r161 r22.kc1.c2 r154.kc1.c2 into r162;
    cast r158 r162 into r163 as ElgamalCipher;
    not r3 into r164;
    and r164 r16 into r165;
    and r165 r19 into r166;
    ternary r166 r22.kc2.c1 r154.kc2.c1 into r167;
    not r3 into r168;
    and r168 r16 into r169;
    and r169 r19 into r170;
    ternary r170 r22.kc2.c2 r154.kc2.c2 into r171;
    cast r167 r171 into r172 as ElgamalCipher;
    not r3 into r173;
    and r173 r16 into r174;
    and r174 r19 into r175;
    ternary r175 r22.kc3.c1 r154.kc3.c1 into r176;
    not r3 into r177;
    and r177 r16 into r178;
    and r178 r19 into r179;
    ternary r179 r22.kc3.c2 r154.kc3.c2 into r180;
    cast r176 r180 into r181 as ElgamalCipher;
    cast r163 r172 r181 into r182 as KillCipher;
    ternary r3 r15.kc1.c1 r182.kc1.c1 into r183;
    ternary r3 r15.kc1.c2 r182.kc1.c2 into r184;
    cast r183 r184 into r185 as ElgamalCipher;
    ternary r3 r15.kc2.c1 r182.kc2.c1 into r186;
    ternary r3 r15.kc2.c2 r182.kc2.c2 into r187;
    cast r186 r187 into r188 as ElgamalCipher;
    ternary r3 r15.kc3.c1 r182.kc3.c1 into r189;
    ternary r3 r15.kc3.c2 r182.kc3.c2 into r190;
    cast r189 r190 into r191 as ElgamalCipher;
    cast r185 r188 r191 into r192 as KillCipher;
    output r192 as KillCipher.private;
